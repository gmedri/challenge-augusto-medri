import * as h3 from 'h3';
import { H3Event } from 'h3';
import { ResponseMeta } from '@trpc/server/http';
import { AnyRouter, inferRouterContext, inferRouterError, ProcedureType, TRPCError } from '@trpc/server';
import { TRPCResponse } from '@trpc/server/rpc';

type MaybePromise<T> = T | Promise<T>;
type CreateContextFn<TRouter extends AnyRouter> = (event: H3Event) => MaybePromise<inferRouterContext<TRouter>>;
interface ResponseMetaFnPayload<TRouter extends AnyRouter> {
    data: TRPCResponse<unknown, inferRouterError<TRouter>>[];
    ctx?: inferRouterContext<TRouter>;
    paths?: string[];
    type: ProcedureType | 'unknown';
    errors: TRPCError[];
}
type ResponseMetaFn<TRouter extends AnyRouter> = (opts: ResponseMetaFnPayload<TRouter>) => ResponseMeta;
interface OnErrorPayload<TRouter extends AnyRouter> {
    error: TRPCError;
    type: ProcedureType | 'unknown';
    path: string | undefined;
    req: H3Event['node']['req'];
    input: unknown;
    ctx: undefined | inferRouterContext<TRouter>;
}
type OnErrorFn<TRouter extends AnyRouter> = (opts: OnErrorPayload<TRouter>) => void;
interface ResolveHTTPRequestOptions<TRouter extends AnyRouter> {
    /**
     * The tRPC router to use.
     * @see https://trpc.io/docs/router
     */
    router: TRouter;
    /**
     * An async function that returns the tRPC context.
     * @see https://trpc.io/docs/context
     */
    createContext?: CreateContextFn<TRouter>;
    /**
     * A function that returns the response meta.
     * @see https://trpc.io/docs/caching#using-responsemeta-to-cache-responses
     */
    responseMeta?: ResponseMetaFn<TRouter>;
    /**
     * A function that is called when an error occurs.
     * @see https://trpc.io/docs/error-handling#handling-errors
     */
    onError?: OnErrorFn<TRouter>;
    batching?: {
        enabled: boolean;
    };
}
declare function createNuxtApiHandler<TRouter extends AnyRouter>({ router, createContext, responseMeta, onError, batching }: ResolveHTTPRequestOptions<TRouter>): h3.EventHandler<h3.EventHandlerRequest, Promise<string | undefined>>;
declare const createH3ApiHandler: typeof createNuxtApiHandler;

export { type CreateContextFn, type OnErrorFn, type OnErrorPayload, type ResolveHTTPRequestOptions, type ResponseMetaFn, type ResponseMetaFnPayload, createH3ApiHandler, createNuxtApiHandler };
