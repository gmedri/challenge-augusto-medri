// src/index.ts
import { resolveHTTPResponse } from "@trpc/server/http";
import {
  TRPCError
} from "@trpc/server";
import { createError, eventHandler, getRequestURL, isMethod, readBody, setResponseHeader, setResponseStatus } from "h3";
import { getErrorShape } from "@trpc/server/shared";
function getPath(event) {
  const { params } = event.context;
  if (typeof params?.trpc === "string") {
    return params.trpc;
  }
  if (params?.trpc && Array.isArray(params.trpc)) {
    return params.trpc.join("/");
  }
  return null;
}
function createNuxtApiHandler({
  router,
  createContext,
  responseMeta,
  onError,
  batching
}) {
  return eventHandler(async (event) => {
    const {
      req
    } = event.node;
    const $url = getRequestURL(event);
    const path = getPath(event);
    if (path === null) {
      const error = getErrorShape({
        config: router._def._config,
        error: new TRPCError({
          message: 'Query "trpc" not found - is the file named `[trpc]`.ts or `[...trpc].ts`?',
          code: "INTERNAL_SERVER_ERROR"
        }),
        type: "unknown",
        ctx: void 0,
        path: void 0,
        input: void 0
      });
      throw createError({
        statusCode: 500,
        statusMessage: JSON.stringify(error)
      });
    }
    const httpResponse = await resolveHTTPResponse({
      batching,
      router,
      req: {
        method: req.method,
        headers: req.headers,
        body: isMethod(event, "GET") ? null : await readBody(event),
        query: $url.searchParams
      },
      path,
      createContext: async () => await createContext?.(event),
      responseMeta,
      onError: (o) => {
        onError?.({
          ...o,
          req
        });
      }
    });
    const { status, headers, body } = httpResponse;
    setResponseStatus(event, status);
    headers && Object.keys(headers).forEach((key) => {
      setResponseHeader(event, key, headers[key]);
    });
    return body;
  });
}
var createH3ApiHandler = createNuxtApiHandler;
export {
  createH3ApiHandler,
  createNuxtApiHandler
};
