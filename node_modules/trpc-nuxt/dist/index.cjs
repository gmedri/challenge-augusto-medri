"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createH3ApiHandler: () => createH3ApiHandler,
  createNuxtApiHandler: () => createNuxtApiHandler
});
module.exports = __toCommonJS(src_exports);
var import_http = require("@trpc/server/http");
var import_server = require("@trpc/server");
var import_h3 = require("h3");
var import_shared = require("@trpc/server/shared");
function getPath(event) {
  const { params } = event.context;
  if (typeof params?.trpc === "string") {
    return params.trpc;
  }
  if (params?.trpc && Array.isArray(params.trpc)) {
    return params.trpc.join("/");
  }
  return null;
}
function createNuxtApiHandler({
  router,
  createContext,
  responseMeta,
  onError,
  batching
}) {
  return (0, import_h3.eventHandler)(async (event) => {
    const {
      req
    } = event.node;
    const $url = (0, import_h3.getRequestURL)(event);
    const path = getPath(event);
    if (path === null) {
      const error = (0, import_shared.getErrorShape)({
        config: router._def._config,
        error: new import_server.TRPCError({
          message: 'Query "trpc" not found - is the file named `[trpc]`.ts or `[...trpc].ts`?',
          code: "INTERNAL_SERVER_ERROR"
        }),
        type: "unknown",
        ctx: void 0,
        path: void 0,
        input: void 0
      });
      throw (0, import_h3.createError)({
        statusCode: 500,
        statusMessage: JSON.stringify(error)
      });
    }
    const httpResponse = await (0, import_http.resolveHTTPResponse)({
      batching,
      router,
      req: {
        method: req.method,
        headers: req.headers,
        body: (0, import_h3.isMethod)(event, "GET") ? null : await (0, import_h3.readBody)(event),
        query: $url.searchParams
      },
      path,
      createContext: async () => await createContext?.(event),
      responseMeta,
      onError: (o) => {
        onError?.({
          ...o,
          req
        });
      }
    });
    const { status, headers, body } = httpResponse;
    (0, import_h3.setResponseStatus)(event, status);
    headers && Object.keys(headers).forEach((key) => {
      (0, import_h3.setResponseHeader)(event, key, headers[key]);
    });
    return body;
  });
}
var createH3ApiHandler = createNuxtApiHandler;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createH3ApiHandler,
  createNuxtApiHandler
});
