// src/client/index.ts
import { createTRPCProxyClient } from "@trpc/client";
import { createFlatProxy } from "@trpc/server/shared";

// src/client/getQueryKey.ts
import { hash } from "ohash";
function getQueryKey(..._params) {
  const [procedure, input] = _params;
  if (typeof procedure === "string") {
    return getQueryKeyInternal(procedure, input);
  }
  const path = procedure._def().path;
  const dotPath = path.join(".");
  return getQueryKeyInternal(dotPath, input);
}
function getQueryKeyInternal(path, input) {
  return input === void 0 ? path : `${path}-${hash(input || "")}`;
}

// src/client/decorationProxy.ts
import { createRecursiveProxy } from "@trpc/server/shared";
import { getCurrentInstance, onScopeDispose, useAsyncData, toValue, ref, isRef, toRaw } from "#imports";
function isRefOrGetter(val) {
  return isRef(val) || typeof val === "function";
}
function createAbortController(trpc) {
  let controller;
  if (trpc?.abortOnUnmount) {
    if (getCurrentInstance()) {
      onScopeDispose(() => {
        controller?.abort?.();
      });
    }
    controller = typeof AbortController !== "undefined" ? new AbortController() : {};
  }
  return controller;
}
function createNuxtProxyDecoration(name, client) {
  return createRecursiveProxy((opts) => {
    const args = opts.args;
    const pathCopy = [name, ...opts.path];
    const lastArg = pathCopy.pop();
    const path = pathCopy.join(".");
    const [input, otherOptions] = args;
    if (lastArg === "_def") {
      return {
        path: pathCopy
      };
    }
    if (["useQuery", "useLazyQuery"].includes(lastArg)) {
      const { trpc, queryKey: customQueryKey, ...asyncDataOptions } = otherOptions || {};
      const controller = createAbortController(trpc);
      const queryKey = customQueryKey || getQueryKeyInternal(path, toValue(input));
      const watch = asyncDataOptions.watch === false ? [] : isRefOrGetter(input) ? [...asyncDataOptions.watch || [], input] : asyncDataOptions.watch;
      const isLazy = lastArg === "useLazyQuery" ? true : asyncDataOptions.lazy || false;
      return useAsyncData(queryKey, () => client[path].query(toValue(input), {
        signal: controller?.signal,
        ...trpc
      }), {
        ...asyncDataOptions,
        watch,
        lazy: isLazy
      });
    }
    if (lastArg === "useMutation") {
      const { trpc, ...asyncDataOptions } = otherOptions || {};
      const payload = ref(null);
      const controller = createAbortController(trpc);
      const asyncData = useAsyncData(() => client[path].mutate(payload.value, {
        signal: controller?.signal,
        ...trpc
      }), {
        ...asyncDataOptions,
        immediate: false
      });
      async function mutate(input2) {
        payload.value = input2;
        await asyncData.execute();
        return toRaw(asyncData.data.value);
      }
      Object.assign(asyncData, { mutate });
      return asyncData;
    }
    return client[path][lastArg](...args);
  });
}

// src/client/links.ts
import {
  httpLink as _httpLink,
  httpBatchLink as _httpBatchLink
} from "@trpc/client";
import { useRequestHeaders } from "#imports";
function isFetchError(error) {
  return error instanceof Error && error.name === "FetchError";
}
function customFetch(input, init) {
  return globalThis.$fetch.raw(input.toString(), init).catch((e) => {
    if (isFetchError(e) && e.response) {
      return e.response;
    }
    throw e;
  }).then((response) => ({
    ...response,
    headers: response.headers,
    json: () => Promise.resolve(response._data)
  }));
}
function httpLink(opts) {
  const headers = useRequestHeaders(opts?.pickHeaders);
  return _httpLink({
    url: "/api/trpc",
    headers() {
      return headers;
    },
    fetch: customFetch,
    ...opts
  });
}
function httpBatchLink(opts) {
  const headers = useRequestHeaders(opts?.pickHeaders);
  return _httpBatchLink({
    url: "/api/trpc",
    headers() {
      return headers;
    },
    fetch: customFetch,
    ...opts
  });
}

// src/client/index.ts
function createTRPCNuxtClient(opts) {
  const client = createTRPCProxyClient(opts);
  const decoratedClient = createFlatProxy((key) => {
    return createNuxtProxyDecoration(key, client);
  });
  return decoratedClient;
}
export {
  createTRPCNuxtClient,
  getQueryKey,
  httpBatchLink,
  httpLink
};
